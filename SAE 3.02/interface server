import sys
import threading
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLineEdit, QLabel, QPushButton, QListWidget, QHBoxLayout, QFrame
)
from PyQt6.QtCore import QTimer, Qt
from PyQt6.QtGui import QIcon, QFont
from server import Server  # Importation de votre classe Server

class ServerGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Configuration Serveur Maître")
        self.resize(600, 500)
        self.setStyleSheet(self.load_styles())
        
        self.server = None  # Variable pour stocker l'instance du serveur

        # Layout principal
        self.layout = QVBoxLayout()
        
        # Bandeau de titre
        title_label = QLabel("Serveur Maître - Configuration")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        title_label.setStyleSheet("color: #ffffff; padding: 10px; background-color: #444444; border-radius: 8px;")
        self.layout.addWidget(title_label)

        # Section des champs de configuration
        self.inputs = {}
        form_layout = QVBoxLayout()
        labels = [
            ("Adresse IP", "127.0.0.1"),
            ("Port Client", "4200"),
            ("Port Serveur", "5200"),
            ("Nb Tâches Max", "10"),
            ("CPU Max", "10"),
            ("Serveur Local (True/False)", "True"),
            ("Nombre Serveurs Secondaires", "2")
        ]
        for label, default in labels:
            h_layout = QHBoxLayout()
            lbl = QLabel(label)
            lbl.setStyleSheet("color: #ffffff;")
            line_edit = QLineEdit(default)
            line_edit.setStyleSheet("background-color: #333333; color: #ffffff; border: 1px solid #555555; padding: 5px;")
            self.inputs[label] = line_edit
            h_layout.addWidget(lbl)
            h_layout.addWidget(line_edit)
            form_layout.addLayout(h_layout)
        self.layout.addLayout(form_layout)

        # Ligne de séparation
        line = QFrame()
        line.setFrameShape(QFrame.Shape.HLine)
        line.setFrameShadow(QFrame.Shadow.Sunken)
        line.setStyleSheet("background-color: #555555; height: 1px;")
        self.layout.addWidget(line)

        # Boutons de commande
        button_layout = QHBoxLayout()
        self.start_button = QPushButton("\u25B6 Lancer le Serveur")
        self.start_button.setIcon(QIcon.fromTheme("media-playback-start"))
        self.start_button.clicked.connect(self.start_server)
        button_layout.addWidget(self.start_button)

        self.stop_button = QPushButton("\u23F9 Arrêter le Serveur")
        self.stop_button.setIcon(QIcon.fromTheme("media-playback-stop"))
        self.stop_button.clicked.connect(self.stop_server)
        self.stop_button.setEnabled(False)
        button_layout.addWidget(self.stop_button)

        self.layout.addLayout(button_layout)

        # Liste des serveurs secondaires
        self.secondary_server_label = QLabel("Serveurs Secondaires Connectés :")
        self.secondary_server_label.setStyleSheet("color: #ffffff; padding-top: 10px;")
        self.layout.addWidget(self.secondary_server_label)

        self.server_list = QListWidget()
        self.server_list.setStyleSheet("background-color: #222222; color: #00FF00; border: none; padding: 5px;")
        self.layout.addWidget(self.server_list)

        # Timer pour actualiser la liste des serveurs secondaires
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_server_list)

        self.setLayout(self.layout)

    def load_styles(self):
        # Thème sombre moderne
        return """
            QWidget {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QPushButton {
                background-color: #444444;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #555555;
            }
            QPushButton:disabled {
                background-color: #333333;
                color: #777777;
            }
            QLabel {
                font-size: 12px;
            }
        """

    def start_server(self):
        ip = self.inputs["Adresse IP"].text()
        port_client = int(self.inputs["Port Client"].text())
        port_server = int(self.inputs["Port Serveur"].text())
        max_taches = int(self.inputs["Nb Tâches Max"].text())
        cpu_max = int(self.inputs["CPU Max"].text())
        local = self.inputs["Serveur Local (True/False)"].text()
        nb_servers = int(self.inputs["Nombre Serveurs Secondaires"].text())

        self.server = Server(ip, max_taches, cpu_max, port_client, port_server, local, nb_servers)
        threading.Thread(target=self.server.start).start()
        self.timer.start(1000)

        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)

    def stop_server(self):
        if self.server:
            self.server.stop()
            self.server = None
        self.timer.stop()
        self.server_list.clear()
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def update_server_list(self):
        self.server_list.clear()
        if self.server and self.server.secondary_servers:
            for server in self.server.secondary_servers:
                status = server["\u00e9tat"]
                server_id = server["id"]
                self.server_list.addItem(f"Serveur_{server_id} - État: {status}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ServerGUI()
    window.show()
    sys.exit(app.exec())
